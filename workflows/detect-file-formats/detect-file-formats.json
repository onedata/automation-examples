{
  "summary": "",
  "schemaFormatVersion": 2,
  "revision": {
    "supplementaryAtmLambdas": {
      "701dd5b89b5befd0fae4fe1203a82134cha16f": {
        "2": {
          "schemaFormatVersion": 2,
          "revision": {
            "schemaFormatVersion": 2,
            "originalRevisionNumber": 2,
            "atmLambdaRevision": {
              "summary": "",
              "state": "draft",
              "resultSpecs": [
                {
                  "relayMethod": "returnValue",
                  "name": "result",
                  "dataSpec": {
                    "valueConstraints": {},
                    "type": "object"
                  }
                }
              ],
              "resourceSpec": {
                "memoryRequested": 104857600,
                "memoryLimit": null,
                "ephemeralStorageRequested": 104857600,
                "ephemeralStorageLimit": null,
                "cpuRequested": 0.1,
                "cpuLimit": null
              },
              "preferredBatchSize": 100,
              "operationSpec": {
                "engine": "openfaas",
                "dockerImage": "docker.onedata.org/lambda-detect-file-format-mounted:v1",
                "dockerExecutionOptions": {
                  "readonly": false,
                  "oneclientOptions": "-i",
                  "oneclientMountPoint": "/mnt/onedata",
                  "mountOneclient": true
                }
              },
              "name": "detect-file-format",
              "description": "",
              "configParameterSpecs": [],
              "checksum": "07ccb0a55e48e9cd5d67aa32046eabc0",
              "argumentSpecs": [
                {
                  "name": "file",
                  "isOptional": false,
                  "defaultValue": null,
                  "dataSpec": {
                    "valueConstraints": {
                      "fileType": "REG"
                    },
                    "type": "file"
                  }
                },
                {
                  "name": "metadataKey",
                  "isOptional": true,
                  "defaultValue": "",
                  "dataSpec": {
                    "valueConstraints": {
                      "allowedValues": null
                    },
                    "type": "string"
                  }
                }
              ]
            }
          },
          "originalAtmLambdaId": "701dd5b89b5befd0fae4fe1203a82134cha16f"
        }
      }
    },
    "schemaFormatVersion": 2,
    "originalRevisionNumber": 1,
    "atmWorkflowSchemaRevision": {
      "stores": [
        {
          "type": "treeForest",
          "requiresInitialContent": true,
          "name": "input-files",
          "id": "a10b3daf76091ff177abc4903e60503e1d9f71",
          "description": "",
          "defaultInitialContent": null,
          "config": {
            "itemDataSpec": {
              "valueConstraints": {
                "fileType": "REG"
              },
              "type": "file"
            }
          }
        },
        {
          "type": "list",
          "requiresInitialContent": false,
          "name": "formats",
          "id": "45f8a90ddfd64a076c43a10e2b24eea904f738",
          "description": "",
          "defaultInitialContent": null,
          "config": {
            "itemDataSpec": {
              "valueConstraints": {},
              "type": "object"
            }
          }
        }
      ],
      "state": "draft",
      "lanes": [
        {
          "storeIteratorSpec": {
            "storeSchemaId": "a10b3daf76091ff177abc4903e60503e1d9f71",
            "maxBatchSize": 2
          },
          "parallelBoxes": [
            {
              "tasks": [
                {
                  "timeSeriesStoreConfig": null,
                  "resultMappings": [
                    {
                      "storeSchemaId": "45f8a90ddfd64a076c43a10e2b24eea904f738",
                      "storeContentUpdateOptions": {
                        "type": "listStoreContentUpdateOptions",
                        "function": "append"
                      },
                      "resultName": "result"
                    }
                  ],
                  "resourceSpecOverride": null,
                  "name": "detect-file-format",
                  "lambdaRevisionNumber": 2,
                  "lambdaId": "701dd5b89b5befd0fae4fe1203a82134cha16f",
                  "lambdaConfig": {},
                  "id": "dd0c7c0ba64e7ecd81aac190ddb2d578f46987",
                  "argumentMappings": [
                    {
                      "valueBuilder": {
                        "valueBuilderType": "iteratedItem",
                        "valueBuilderRecipe": null
                      },
                      "argumentName": "file"
                    },
                    {
                      "valueBuilder": {
                        "valueBuilderType": "const",
                        "valueBuilderRecipe": "format"
                      },
                      "argumentName": "metadataKey"
                    }
                  ]
                }
              ],
              "name": "Parallel box",
              "id": "4b1ea214f6bc255a96fd4a5c649cc054b4da11"
            }
          ],
          "name": "l1",
          "maxRetries": 0,
          "id": "c76bf9281ff51c0620cd51c9ca5f3698c81097",
          "dashboardSpec": null
        }
      ],
      "description": "This workflow takes files as input. For each file,  tries to  infer code language, or file type based only on its content (Guesslang library is used).  Also, checks mime type of file, and indicate if content match mime extension.\nCurrently supported file extensions are: .py .c .cc .csv .json. More extensions can be added in lambda implementation. ",
      "dashboardSpec": null
    }
  },
  "originalAtmWorkflowSchemaId": "9eefb7d41748cf4cdd74818b277ead77che862",
  "name": "detect-file-formats"
}